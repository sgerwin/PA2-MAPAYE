import numpy as np
#Generation of random 5x5 ndarray
x=np.random.random((5,5))
x

array([[0.55218262, 0.72355829, 0.81715767, 0.18968259, 0.98098357],
       [0.60572432, 0.65451009, 0.31520787, 0.91451753, 0.40345266],
       [0.79742639, 0.04110222, 0.9197152 , 0.22968979, 0.77802526],
       [0.57199042, 0.09978085, 0.57846098, 0.63838982, 0.56888284],
       [0.24876342, 0.93582718, 0.29770242, 0.95168728, 0.587905  ]])

#Storing mean and std deviation for formula
mean=np.mean(x)
std=np.std(x)

#Formula for normalization
x_normalized=(x-mean)/std

#Output
x_normalized
array([[-0.08643144,  0.53305734,  0.87140038, -1.39679651,  1.46359824],
       [ 0.10711111,  0.28346191, -0.94304776,  1.22333678, -0.62406048],
       [ 0.80007574, -1.93388484,  1.24212532, -1.25217849,  0.72994455],
       [-0.0148302 , -1.72177333,  0.00855958,  0.22519037, -0.02606348],
       [-1.18323114,  1.30036693, -1.00632644,  1.35769801,  0.04269781]])

#Saving of file
np.save("x_normalized.npy",x_normalized)

Problem 2
#Generation of 10x10 array of squares of integers from 1 to 100
X=np.arange(1,101)**2
Y=X.reshape(10,10)
Y
array([[    1,     4,     9,    16,    25,    36,    49,    64,    81,
          100],
       [  121,   144,   169,   196,   225,   256,   289,   324,   361,
          400],
       [  441,   484,   529,   576,   625,   676,   729,   784,   841,
          900],
       [  961,  1024,  1089,  1156,  1225,  1296,  1369,  1444,  1521,
         1600],
       [ 1681,  1764,  1849,  1936,  2025,  2116,  2209,  2304,  2401,
         2500],
       [ 2601,  2704,  2809,  2916,  3025,  3136,  3249,  3364,  3481,
         3600],
       [ 3721,  3844,  3969,  4096,  4225,  4356,  4489,  4624,  4761,
         4900],
       [ 5041,  5184,  5329,  5476,  5625,  5776,  5929,  6084,  6241,
         6400],
       [ 6561,  6724,  6889,  7056,  7225,  7396,  7569,  7744,  7921,
         8100],
       [ 8281,  8464,  8649,  8836,  9025,  9216,  9409,  9604,  9801,
        10000]])

#Output of Y so it is more pleasant to look at
print(Y)
[[    1     4     9    16    25    36    49    64    81   100]
 [  121   144   169   196   225   256   289   324   361   400]
 [  441   484   529   576   625   676   729   784   841   900]
 [  961  1024  1089  1156  1225  1296  1369  1444  1521  1600]
 [ 1681  1764  1849  1936  2025  2116  2209  2304  2401  2500]
 [ 2601  2704  2809  2916  3025  3136  3249  3364  3481  3600]
 [ 3721  3844  3969  4096  4225  4356  4489  4624  4761  4900]
 [ 5041  5184  5329  5476  5625  5776  5929  6084  6241  6400]
 [ 6561  6724  6889  7056  7225  7396  7569  7744  7921  8100]
 [ 8281  8464  8649  8836  9025  9216  9409  9604  9801 10000]]

#Elements divisible by 3
div_by_3 = Y[Y % 3 == 0]
div_by_3
array([   9,   36,   81,  144,  225,  324,  441,  576,  729,  900, 1089,
       1296, 1521, 1764, 2025, 2304, 2601, 2916, 3249, 3600, 3969, 4356,
       4761, 5184, 5625, 6084, 6561, 7056, 7569, 8100, 8649, 9216, 9801])

#Cleaner output
print(div_by_3)
[   9   36   81  144  225  324  441  576  729  900 1089 1296 1521 1764
 2025 2304 2601 2916 3249 3600 3969 4356 4761 5184 5625 6084 6561 7056
 7569 8100 8649 9216 9801]

#Saving of file
np.save("div_by_3.npy",div_by_3)
 
